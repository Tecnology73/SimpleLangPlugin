{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"

  tokens=[
    LBRACE = '{'
    RBRACE = '}'
    LPAREN = '('
    RPAREN = ')'
    LBRACK = '['
    RBRACK = ']'

    SEMICOLON = ';'
    COLON = ':'
    COMMA = ','
    DOT = '.'
    DOUBLE_DOT = '..'

    ASSIGN = "="
    EQUAL = "=="

    SEMICOLON_SYNTHETIC = '<NL>'
    TYPE_ = 'type'
  ]

  generateTokenAccessors=true
}

program ::= TopLevelDeclaration*

private semi ::= '<NL>' | ';' | <<eof>>

private TopLevelDeclaration ::= !<<eof>> TopDeclaration semi {pin=1 recoverWhile=TopLevelDeclarationRecover}
private TopDeclaration ::=
      TypeDeclaration
    | Function
private TopLevelDeclarationRecover ::= !(SEMICOLON | TYPE_ | func)

Parameters ::= LPAREN (identifier COLON identifier COMMA?)* RPAREN
Arguments ::= LPAREN (Literal COMMA?)* RPAREN

TypeDeclaration ::= TYPE_ identifier Block
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getName setName getNameIdentifier getPresentation getReference]
}
Function ::= func identifier Parameters identifier? Block

Block ::= LBRACE Statement* RBRACE

Statement ::= (
      ReturnStatement
    | VariableDeclaration
    | ConstructorCall
) semi

private Literal ::=
      int
    | identifier

Expression ::= Literal | ConstructorCall

ReturnStatement ::= return Expression? // return expr
VariableDeclaration ::=
      identifier (COLON identifier)? ASSIGN Expression  // a: T = value
    | identifier COLON identifier                       // a: T
    | identifier ASSIGN Expression                      // A = value
ConstructorCall ::=
    new identifier Arguments // new T(...)
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getKey getName setName getNameIdentifier getReference]
}

{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"

  tokens=[
    LBRACE = '{'
    RBRACE = '}'
    LPAREN = '('
    RPAREN = ')'
    LBRACK = '['
    RBRACK = ']'

    SEMICOLON = ';'
    COLON = ':'
    COMMA = ','
    DOT = '.'
    DOUBLE_DOT = '..'

    LESS_THAN = '<'
    GREATER_THAN = '>'

    ASSIGN = "="
    EQUAL = "=="

    SEMICOLON_SYNTHETIC = '<NL>'
    TYPE_ = 'type'
  ]

  generateTokenAccessors=true
}

program ::= TopLevelDeclaration*

private semi ::= SEMICOLON_SYNTHETIC | SEMICOLON | <<eof>>

TopLevelDeclaration ::= !<<eof>> (TypeDeclaration | Function) semi {pin=1 recoverWhile=TopLevelDeclarationRecover}
private TopLevelDeclarationRecover ::= !(SEMICOLON | TYPE_ | func)

VariableName ::= identifier
TypeName ::= identifier
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getKey getName setName getNameIdentifier getPresentation getReference]
}

Literal ::= int | identifier

// (a: T(, b: T)?)
Parameters ::= LPAREN (Parameter (COMMA Parameter)*)? RPAREN
Parameter ::= identifier COLON TypeName

Arguments ::= LPAREN (Expression (COMMA Expression)*)? RPAREN

Generic ::= LESS_THAN TypeName GREATER_THAN

TypeDeclaration ::= TYPE_ TypeName TypeBlock
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getKey getName setName getNameIdentifier getPresentation getReference]
}
TypeBlock ::= LBRACE TypeField* RBRACE
TypeField ::= identifier (
        COLON TypeName ASSIGN ValueExpr   // a: T = value
      | COLON TypeName                    // a: T
      | ASSIGN ValueExpr                  // a = value
) semi

Function ::= func FunctionReceiver? identifier Generic? Parameters TypeName? Block
{
    pin=3
    extends="com.example.sampleplugin.psi.impl.SimpleFunctionImpl"
    implements="com.example.sampleplugin.psi.SimpleFunction"
    methods=[getName getNameIdentifier getReference]
}
FunctionReceiver ::= LESS_THAN TypeName GREATER_THAN

Block ::= LBRACE Statement* RBRACE

Statement ::=
      ReturnStatement
    | VariableDeclaration
    | Expression semi

Expression ::=
      AssignExpr
    | CallGroup
    | ValueExpr
    | MemberAccessExpr

ValueExpr ::=
      int
    | identifier
    | ConstructorCall

private CallGroup ::= CallExpr | MemberCallExpr

MemberCallExpr ::= MemberAccessExpr Arguments

CallExpr ::= identifier Arguments
AssignExpr ::= identifier ASSIGN Expression {pin=1 rightAssociative=true}

ReturnStatement ::= return Expression? semi // return expr

VariableDeclaration ::= identifier (
      COLON TypeName ASSIGN Expression   // a: T = value
    | COLON TypeName                     // a: T
    | ASSIGN Expression                  // a = value
) semi
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getKey getName setName getNameIdentifier getPresentation getReference]
}

ConstructorCall ::= new TypeName Arguments // new T(...)
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getKey getName setName getNameIdentifier getPresentation getReference]
}

FunctionCall ::= identifier Arguments // func(...)
{
    mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
    implements="org.intellij.sdk.language.psi.SimpleNamedElement"
    methods=[getKey getName setName getNameIdentifier getPresentation getReference]
}

MemberAccessExpr ::= Expression DOT identifier
{
    pin=2
    recoverWhile=MemberAccessExprRecover
    mixin="com.example.sampleplugin.psi.impl.SimpleMemberAccessExprImpl"
    methods=[getReference isCallExpression getLHS getRHS]
}
private MemberAccessExprRecover ::= !(DOT | semi | RBRACE | identifier | '\n')
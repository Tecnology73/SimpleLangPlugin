{
  parserClass="com.example.sampleplugin.parser.SimpleParser"
//  parserUtilClass="com.example.sampleplugin.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="com.example.sampleplugin.psi"
  psiImplPackage="com.example.sampleplugin.psi.impl"

  elementTypeHolderClass="com.example.sampleplugin.psi.SimpleTypes"
  elementTypeClass="com.example.sampleplugin.psi.SimpleElementType"
  tokenTypeClass="com.example.sampleplugin.psi.SimpleTokenType"

  psiImplUtilClass="com.example.sampleplugin.psi.impl.SimplePsiImplUtil"

  extends(".*Expr")=Expression

  tokens=[
    LINE_COMMENT="regexp://.*"
    BLOCK_COMMENT="regexp:/\*.*?\*/"

    // Characters
    COLON=':'
    COLONCOLON='::'
    DOT='.'
    DOTDOT='..'
    COMMA=','
    SEMICOLON=';'
    LCURLY='{'
    RCURLY='}'
    LBRACK='['
    RBRACK=']'
    LPAREN='('
    RPAREN=')'

    // Operators
    PLUS='+'
    PLUSEQ='+='
    MINUS='-'
    MINUSEQ='-='
    MUL='*'
    MULEQ='*='
    DIV='/'
    DIVEQ='/='
    EQ='='
    LANGLE='<'
    LE='<='
    RANGLE='>'
    GE='>='
    EQEQ='=='
    NE='!='
    AND='&&'
    OR='||'
    NOT='!'

    // Keywords
    NEW_KW='new'
    FUNC_KW='func'
    TYPE_KW='type'
    RETURN_KW='return'
//    BREAK_KW='break'
//    CONTINUE_KW='continue'
//    IF_KW='if'
//    ELSE_KW='else'
//    FOR_KW='for'
//    AS_KW='as'
//    STEP_KW='step'
//    IMPORT_KW='import'

//    VALUE_STRING="regexp:(\"[A-Za-z_][A-Za-z0-9_]*\"|'[A-Za-z_][A-Za-z0-9_]*')"
    VALUE_NULL="regexp:null|NULL"
    VALUE_BOOL="regexp:true|false"
    VALUE_INTEGER="regexp:[0-9]+"
    // .0f 0.0f
    VALUE_FLOAT="regexp:([-]?[0-9]*\.[0-9]+([Ee][+\-]?[0-9]+)?f|[-]?[0-9]+([Ee][+\-]?[0-9]+)?f)"

    ID="regexp:[a-zA-Z_][a-zA-Z_0-9]*"
  ]

  generateTokenAccessors=true
  implements("Type|FunctionId")="com.example.sampleplugin.psi.SimpleNamedElement"
  extends("Type|FunctionId")="com.example.sampleplugin.psi.impl.SimpleNamedElementImpl"
}

program ::= TopLevelDeclaration*
TopLevelDeclaration ::= !<<eof>> (TypeDeclaration | FunctionDeclaration)

Generic ::= LANGLE ID RANGLE {pin=1}

Type ::= ID { methods=[getReference] }
TypeDeclaration ::= TYPE_KW Type TypeBlock
{
    pin=1
    mixin="com.example.sampleplugin.psi.impl.SimpleNamedElementImpl"
    implements="com.example.sampleplugin.psi.SimpleNamedElement"
    methods=[getName getNameIdentifier getReference]
}
TypeBlock ::= LCURLY (TypeField SEMICOLON)* RCURLY {pin=1}
TypeField ::= ID (TypeFieldWithType | TypeFieldWithoutType)
private TypeFieldWithType ::= COLON ID (EQ Expression)? {pin=1}
private TypeFieldWithoutType ::= EQ Expression {pin=1}

Block ::= LCURLY Statement* RCURLY {pin=1}

FunctionReceiver ::= LANGLE ID RANGLE {pin=1}
FunctionId ::= ID { methods=[getReference] }
Parameters ::= LPAREN (Parameter (COMMA Parameter)*)? RPAREN {pin=1}
Parameter ::= ID COLON ID (EQ Expression)? {pin=1}
FunctionDeclaration ::= FUNC_KW FunctionReceiver? FunctionId Generic? Parameters ID? Block
{
    pin=1
    extends="com.example.sampleplugin.psi.impl.SimpleFunctionImpl"
    implements="com.example.sampleplugin.psi.SimpleFunction"
    methods=[getName getNameIdentifier getReference]
}

Statement ::= (
      ReturnStatement
    | VariableDeclaration
    | Expression
) SEMICOLON {pin=1}

ReturnStatement ::= RETURN_KW Expression? {pin=1}

VariableDeclaration ::= ID (VarDeclWithType | VarDeclWithoutType)
private VarDeclWithType ::= COLON ID (EQ Expression)? {pin=1}
private VarDeclWithoutType ::= EQ Expression {pin=1}


Expression ::=
      MemberCallExpr
    | MemberAccessExpr
    | AssignExpr
    | PrimaryExpr

PrimaryExpr ::=
      FunctionCall
    | ValueExpr

ValueExpr ::=
      ConstructorCall
    | VALUE_INTEGER
    | VALUE_FLOAT
    | VALUE_NULL
    | VALUE_BOOL
    | ID

AssignExpr ::= PrimaryExpr (EQ | PLUSEQ | MINUSEQ | MULEQ | DIVEQ) Expression {pin=2 rightAssociative=true}

FunctionCall ::= ID Arguments {pin=2}
ConstructorCall ::= NEW_KW ID Arguments {pin=1}
Arguments ::= LPAREN (Expression (COMMA Expression)*)? RPAREN {pin=1}

MemberAccessExpr ::= PrimaryExpr DOT ID
{
    pin=2
    extends="com.example.sampleplugin.psi.impl.SimpleMemberAccessExprMixinImpl"
    methods=[getReference isCallExpression getLHS getRHS]
}
MemberCallExpr ::= MemberAccessExpr Arguments
{
    pin=2
    mixin="com.example.sampleplugin.psi.impl.SimpleMemberCallExprMixinImpl"
    methods=[getReference]
}
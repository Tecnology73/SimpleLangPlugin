{
    tokens=[
        WS="regexp:[ \t\n\r]+"

        COMMA=","
        DOT="."
        EQ="="
        SEMICOLON=";"
        COLON=":"
        LPAREN="("
        RPAREN=")"
        LCURLY="{"
        RCURLY="}"

        NUMBER="regexp:[0-9]+"
        ID="regexp:[a-zA-Z_][a-zA-Z_0-9]*"
    ]
}

program ::= (func_decl)*


func_decl ::= "func" ID parameters ID block {pin=1}
parameters ::= LPAREN (parameter (COMMA parameter)*)? RPAREN
parameter ::= ID COLON ID {pin=1}

block ::= LCURLY statement* RCURLY {pin=1}

statement ::= (
      return_statement
    | var_decl
    | expression
) SEMICOLON {pin=1}

return_statement ::= "return" expression? {pin=1}


expression ::= member_call_expr | member_access_expr | assign_expr | primary_expr
primary_expr ::= function_call | value_expr

value_expr ::= NUMBER | ID
member_access_expr ::= primary_expr DOT ID {pin=2}
member_call_expr ::= member_access_expr arguments {pin=2}

function_call ::= ID arguments? {pin=2}
arguments ::= LPAREN (expression (COMMA expression)*)? RPAREN {pin=1}

assign_expr ::= primary_expr "+=" expression {pin=2 rightAssociative=true}

var_decl ::= ID (var_decl_with_type | var_decl_without_type)
private var_decl_with_type ::= COLON ID (EQ expression)? {pin=1}
private var_decl_without_type ::= EQ expression {pin=1}